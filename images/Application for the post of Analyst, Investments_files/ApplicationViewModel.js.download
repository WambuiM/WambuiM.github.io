var RctApplication = {
    Vm: {},
    Current: ko.observable(),
    CV: ko.observable(),
    AppImage: ko.observable(),
    CurrentDependent: ko.observable(null),
    CurrentEduQlf: ko.observable(null),
    CurrentLangProficiency: ko.observable(null),
    CurrentSubject: ko.observable(null),
    CurrentWorkExp: ko.observable(null),
    CurrentReferee: ko.observable(null),
    CurrentAttachment: ko.observable(null),
    CurrentArticle: ko.observable(null),
    CurrentExCurActivity: ko.observable(null),
    CurrentMembershipDetails: ko.observable(null),

    Salutations: ko.observableArray([]),
    Genders: ko.observableArray([]),
    CivilStatuses: ko.observableArray([]),
    Nationalities: ko.observableArray([]),
    Countries: ko.observableArray([]),
    Relationships: ko.observableArray([]),
    QualifyTypes: ko.observableArray([]),
    Qualifications: ko.observableArray([]),
    StartYears: ko.observableArray([]),
    FinishYears: ko.observableArray([]),
    Subjects: ko.observableArray([]),
    SubjectGrades: ko.observableArray([]),
    Currencies: ko.observableArray([]),
    AttachTypes: ko.observableArray([]),
    ArticleCategories: ko.observableArray([]),
    ExCurCategories: ko.observableArray([]),
    ExCurActivityTypes: ko.observableArray([]),
    Sources: ko.observableArray([]),
    Languages: ko.observableArray([]),
    LangRatings: ko.observableArray([]),
    ValidateFailRefrees: ko.observable(false),
    ValidateFailWorkExperience: ko.observable(false),
    HasOtherItemError: ko.observable(false),
    UserItems: ['RctAppPerUploadCV', 'RctAppPerPreferredName', 'RctAppPerEmpImage'],
    SalutationList: ko.observableArray([]),
    ValidateFailGenderSaluation: ko.observable(false),
    ValidAge: ko.observable(),
    ValidateFailMinimumAge: ko.observable(false),
    ValidateVsq: ko.observable(false),
    DefaultCountry: ko.observable(),
    //IsFresherForWork: ko.observable(),
    ValidateFailFresherWork: ko.observable(false),
    MembershipTypes: ko.observableArray([]),
    Membership: ko.observableArray([]),
    FilteredMembership: ko.observableArray([]),
    MembershipTitles: ko.observableArray([]),
    Electorates: ko.observableArray([]),
    Districts: ko.observableArray([]),
    Provinces: ko.observableArray([]),
    DSDivisions: ko.observableArray([]),
    GNDivisions: ko.observableArray([]),
    FilteredGNDivisions: ko.observableArray([]),
    Religions: ko.observableArray([]),
    Departments: ko.observableArray([]),
    CVParserType: ko.observable(),
   
    ViewModel: function () {
        RctApplication.Current(null);
        RctApplication.CV(null);
        RctApplication.AppImage(null);
        RctApplication.CurrentDependent(new RctApplication.RctDependentInit(null));
        RctApplication.CurrentEduQlf(new RctApplication.RctEduQlfInit(null));
        RctApplication.CurrentLangProficiency(new RctApplication.RctLangProficiencyInit(null));
        RctApplication.CurrentSubject(new RctApplication.RctSubjectInit(null));
        RctApplication.CurrentWorkExp(new RctApplication.RctWorkExpInit(null));
        RctApplication.CurrentReferee(new RctApplication.RctRefereeInit(null));
        RctApplication.CurrentAttachment(new RctApplication.RctAttachmentInit(null));
        RctApplication.CurrentArticle(new RctApplication.RctArticleInit(null));
        RctApplication.CurrentExCurActivity(new RctApplication.RctExCurActivityInit(null));
        RctApplication.CurrentMembershipDetails(new RctApplication.RctMembershipDetailsInit(null));

        RctApplication.Salutations([]);
        RctApplication.Genders([]);
        RctApplication.CivilStatuses([]);
        RctApplication.Nationalities([]);
        RctApplication.Countries([]);
        RctApplication.Relationships([]);
        RctApplication.QualifyTypes([]);
        RctApplication.Qualifications([]);
        RctApplication.StartYears([]);
        RctApplication.FinishYears([]);
        RctApplication.Subjects([]);
        RctApplication.SubjectGrades([]);
        RctApplication.Currencies([]);
        RctApplication.AttachTypes([]);
        RctApplication.ArticleCategories([]);
        RctApplication.ExCurCategories([]);
        RctApplication.ExCurActivityTypes([]);
        RctApplication.Sources([]);
        RctApplication.Languages([]);
        RctApplication.LangRatings([]);
        RctApplication.SalutationList([]);
        RctApplication.MembershipTypes([]);
        RctApplication.Membership([]);
        RctApplication.MembershipTitles([]);
        RctApplication.Electorates([]);
        RctApplication.Districts([]);
        RctApplication.Provinces([]);
        RctApplication.DSDivisions([]);
        RctApplication.GNDivisions([]);
        RctApplication.FilteredGNDivisions([]);
        RctApplication.Religions([]);
        RctApplication.Departments([]);
        //RctApplication.IsFresherForWork(false)
        RctApplication.CVParserType($('#rctHdnCvParserMode').val());
    },

    Init: function () {
        RctApplication.Vm = new RctApplication.ViewModel();
        ko.applyBindings(RctApplication.Vm, $('#divApplication')[0]);
        RctApplication.ReloadData();
    },
    GetHost: function (relativePath) {
        var hostPath = $('#rctHdnRctHost').val();
        return hostPath;
    },
    GetPath: function (relativePath) {
        var path = RctApplication.GetHost() + relativePath;
        return path;
    },
    ReloadData: function () {
        var reqId = $('#rctHdnReqId').val();
        var type = $('#rctHdnRecType').val();
        var jpaId = $('#rctHdnJPAId').val();
        var appId = $('#rctHdnAppId').val();
        var mode = $('#rctHdnMode').val();
        var isProfile = $('#rctHdnIsProfile').val();
        var isLinkFromAlert = $('#rctHdnIsLinkFromAlert').val();
        var isAppliedViaLink = $('#rctHdnIsAppliedViaLink').val();
        var rctHdnEmpNumber = $('#rctHdnEmpNumber').val();
        var qUrl = RctApplication.GetPath('Common/GetToken');
        var q = RctGetTokenFromUrl(qUrl, RctAppDataTokenName);
        var param = { reqId: reqId, type: type, jpaId: jpaId, appId: appId, mode: mode, q: q, isAppliedViaLink: isAppliedViaLink, empNo: rctHdnEmpNumber, isProfile: isProfile, isLinkFromAlert: isLinkFromAlert };
        var url = RctApplication.GetPath("Application/GetApplicationData");
        $.ajax({
            url: url,
            type: 'GET',
            async: false,
            data: param,
            contentType: 'application/json'
        }).done(function (data, textStatus, jqXHR) {
            if (data.IsSuccessfull) {

                var obj = new RctApplication.InitApplication(data.Data);
                RctApplication.Current(obj);
                if (data.Data.Mode == "view") {
                    $('#rctHdnAppId').val(data.Data.AppId);
                    $('#rctHdnMode').val(data.Data.Mode);
                    RctApplication.UpdateControlesToViewMode();
                }
                RctApplication.UpdateProfileCompleteness();
                if ($("#RctAppPerEmpImageImg").length > 0) {
                    var url = RctApplication.GetPath("Common/GetAppImage") +
                        "?mode=" + data.Data.Mode +
                        "&appId=" + data.Data.AppId +
                        "&empNumber=" + data.Data.EmpNumber +
                        "&jpaId=" + data.Data.JPAId +
                        "&isProfile=" + isProfile;
                    $("#RctAppPerEmpImageImg").attr('src', url);
                }
                if (RctApplication.Current().PersonalInfo().GNDivisionCode() != null && RctApplication.Current().PersonalInfo().GNDivisionCode() != '') {
                    for (var i = 0; i < RctApplication.GNDivisions().length; i++) {
                        if (RctApplication.GNDivisions()[i].Key == RctApplication.Current().PersonalInfo().GNDivisionCode()) {
                            RctApplication.FilteredGNDivisions.push(RctApplication.GNDivisions()[i]);
                        }
                    }
                }

                if (RctApplication.Current().PersonalInfo().GenderCode() == null && RctApplication.Genders().length > 0) {
                    RctApplication.Current().PersonalInfo().GenderCode(RctApplication.Genders()[0]["Key"]);
                }
            } else {
                RctApplication.ShowRctAppMessage("error", data.Message);
            }
        }).fail(function (jqXHR, textStatus, errorThrown) {
            RctApplication.ShowRctAppError(jqXHR, textStatus, errorThrown);
        });
    },
    UpdateControlesToViewMode: function () {
        //$("#divApplication").find("input").attr("disabled", "disabled")
        //$("#divApplication").find("textarea").attr("disabled", "disabled")
        //$("#divApplication").find("select").attr("disabled", "disabled")
    },
    AddOtherQualifications: function () {
        var otherQual = {
            Key: 'Other',
            Value: 'Other'
        }
        RctApplication.Qualifications.push(otherQual);
    },
    LoadQualificationsForType: function (qlfTypeCode) {
        RctApplication.Qualifications([]);
        if (qlfTypeCode) {
            var param = { qlfTypeCode: qlfTypeCode };
            var url = RctApplication.GetPath("Application/GetQualificationsForType");
            $.ajax({
                url: url,
                type: 'GET',
                async: false,
                data: param,
                contentType: 'application/json'
            }).done(function (data, textStatus, jqXHR) {

                if (data.IsSuccessfull) {
                    RctApplication.Qualifications(data.Data);
                    if (data.Data && RctApplication.Current().IsEnableOtherQualifications()) {
                        RctApplication.AddOtherQualifications();
                    }
                } else {
                    RctApplication.ShowRctAppMessage("error", data.Message);
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                RctApplication.ShowRctAppError(jqXHR, textStatus, errorThrown);
            });
        }
    },
    LoadQlfSubjects: function (qlfCode) {
        RctApplication.Subjects([]);
        var param = { qlfCode: qlfCode };
        var url = RctApplication.GetPath("Application/GetQlfSubjects");
        $.ajax({
            url: url,
            type: 'GET',
            async: false,
            data: param,
            contentType: 'application/json'
        }).done(function (data, textStatus, jqXHR) {
            if (data.IsSuccessfull) {
                RctApplication.Subjects(data.Data)
            } else {
                RctApplication.ShowRctAppMessage("error", data.Message);
            }
        }).fail(function (jqXHR, textStatus, errorThrown) {
            RctApplication.ShowRctAppError(jqXHR, textStatus, errorThrown);
        });
    },

    LoadQlfGrades: function (qlfCode) {
        RctApplication.SubjectGrades([]);
        if (RctApplication.CurrentSubject()) {
            RctApplication.CurrentSubject().SubjGradeCode(null);
            RctApplication.CurrentSubject().SubjGrade(null);
        }
        var param = { qlfCode: qlfCode };
        var url = RctApplication.GetPath("Application/GetQlfGrades");
        $.ajax({
            url: url,
            type: 'GET',
            async: false,
            data: param,
            contentType: 'application/json'
        }).done(function (data, textStatus, jqXHR) {
            if (data.IsSuccessfull) {
                RctApplication.SubjectGrades(data.Data)
            } else {
                RctApplication.ShowRctAppMessage("error", data.Message);
            }
        }).fail(function (jqXHR, textStatus, errorThrown) {
            RctApplication.ShowRctAppError(jqXHR, textStatus, errorThrown);
        });
    },
    LoadLangRatings: function (langCode) {
        RctApplication.LangRatings([]);
        if (RctApplication.CurrentLangProficiency()) {
            RctApplication.CurrentLangProficiency().ReadCode(null);
            RctApplication.CurrentLangProficiency().WriteCode(null);
            RctApplication.CurrentLangProficiency().SpeakCode(null);
            RctApplication.CurrentLangProficiency().ReadGrade(null);
            RctApplication.CurrentLangProficiency().WriteGrade(null);
            RctApplication.CurrentLangProficiency().SpeakGrade(null);
        }
        var param = { langCode: langCode };
        var url = RctApplication.GetPath("Application/GetLangRatings");
        $.ajax({
            url: url,
            type: 'GET',
            async: false,
            data: param,
            contentType: 'application/json'
        }).done(function (data, textStatus, jqXHR) {
            if (data.IsSuccessfull) {
                RctApplication.LangRatings(data.Data)
            } else {
                RctApplication.ShowRctAppMessage("error", data.Message);
            }
        }).fail(function (jqXHR, textStatus, errorThrown) {
            RctApplication.ShowRctAppError(jqXHR, textStatus, errorThrown);
        });
    },
    LoadExCurActivityTypes: function (exCurCatCode) {
        RctApplication.ExCurActivityTypes([]);
        var param = { exCurCatCode: exCurCatCode };
        var url = RctApplication.GetPath("Application/GetAllExCurActivityTypes");
        $.ajax({
            url: url,
            type: 'GET',
            async: false,
            data: param,
            contentType: 'application/json'
        }).done(function (data, textStatus, jqXHR) {
            if (data.IsSuccessfull) {
                RctApplication.ExCurActivityTypes(data.Data)
            } else {
                RctApplication.ShowRctAppMessage("error", data.Message);
            }
        }).fail(function (jqXHR, textStatus, errorThrown) {
            RctApplication.ShowRctAppError(jqXHR, textStatus, errorThrown);
        });
    },
    UpdateProfileCompleteness: function () {
        var control = $(".rct-prof-compl");
        var allCount = 0;
        var invalidCount = 0;
        if (control && control.length > 0) {
            var allItems = RctApplication.GetMandatoryItems('#RctAppPersonalInfoTab');
            allItems = allItems.concat(RctApplication.GetMandatoryItems('#RctAppOtherInformationTab'));
            allItems = allItems.concat(RctApplication.GetMandatoryItems('#RctNtbDeclarationTab'));
            allItems = allItems.concat(RctApplication.GetMandatoryItems('#RctNtbScoreCard'));
            allCount = allItems.length;
            for (var i = 0; i < allItems.length; i++) {
                // bypass hidden items 
                if ($(allItems[i]).is(":visible") == false) {
                    allCount--;
                    continue;
                }
                var id = $(allItems[i]).attr('id');
                tempValid = RctApplication.ValidateItem(id, "true");
                if (tempValid == false) {
                    invalidCount++;
                }
            }
        }

        if (allCount > 0) {
            var val = (((allCount - invalidCount) / allCount) * 100).toFixed(0);
            if (val > 100) {
                val = 100;
            } else if (val < 0) {
                val = 0;
            }
            $(control).attr('aria-valuenow', val);
            $(control).attr('style', 'width:' + val + '%;');
            $(control).text(val + '%');
        } else {
            val = 0;
            $(control).attr('aria-valuenow', val);
            $(control).attr('style', 'width:' + val + '%;');
            $(control).text(val + '%');
        }
    },
    GetMandatoryItems: function (eleId) {
        var items = [];
        if ($(eleId).length > 0) {
            var newitems = $(eleId).find("[data-rct-required='true']");
            if (newitems && newitems.length > 0) {
                items = items.concat(newitems.toArray());
            }
        }
        return items;
    },
    InitApplication: function (data) {

        this.AppId = ko.observable(data.AppId);
        this.Mode = ko.observable(data.Mode);
        this.ReqId = ko.observable(data.ReqId);
        this.RecType = ko.observable(data.RecType);
        this.EmpNumber = ko.observable(data.EmpNumber);
        this.JPAId = ko.observable(data.JPAId);
        this.AppId = ko.observable(data.AppId);
        this.IsProfile = ko.observable(data.IsProfile);
        this.IsCvReq = ko.observable(data.IsCvReq);
        this.IsEnableOtherQualifications = ko.observable(data.IsEnableOtherQualifications);
        this.CV = ko.observable(null);
        if (data.Cv) {
            var ref = new RctApplication.RctAttachmentInit(data.Cv);
            this.CV = ko.observable(ref);
        }
        if (data.AppImage) {
            var ref = new RctApplication.RctAttachmentInit(data.AppImage);
            this.AppImage = ko.observable(ref);
        }

        RctApplication.DefaultCountry(data.DefaultCountry);

        this.PersonalInfo = ko.observable(new RctApplication.RctPersonalInfoInit(data.PersonalInfo));
        this.Dependents = ko.observableArray([]);
        for (var i = 0; i < data.Dependents.length; i++) {
            var dependent = new RctApplication.RctDependentInit(data.Dependents[i]);
            this.Dependents.push(dependent);
        }
        
        this.EduQualifications = ko.observableArray([]);
        for (var i = 0; i < data.EduQualifications.length; i++) {
            var qlf = new RctApplication.RctEduQlfInit(data.EduQualifications[i]);
            this.EduQualifications.push(qlf);
        }
        this.LangProficiencies = ko.observableArray([]);
        for (var i = 0; i < data.LangProficiencies.length; i++) {
            var qlf = new RctApplication.RctLangProficiencyInit(data.LangProficiencies[i]);
            this.LangProficiencies.push(qlf);
        }
        this.WorkExperiances = ko.observableArray([]);
        for (var i = 0; i < data.WorkExperiances.length; i++) {
            var wx = new RctApplication.RctWorkExpInit(data.WorkExperiances[i]);
            this.WorkExperiances.push(wx);
        }
        this.Memberships = ko.observableArray([]);
        for (var i = 0; i < data.Memberships.length; i++) {
            var memb = new RctApplication.RctMembershipDetailsInit(data.Memberships[i]);
            this.Memberships.push(memb);
        }
        this.Referees = ko.observableArray([]);
        for (var i = 0; i < data.Referees.length; i++) {
            var ref = new RctApplication.RctRefereeInit(data.Referees[i]);
            this.Referees.push(ref);
        }
        this.Attachments = ko.observableArray([]);
        for (var i = 0; i < data.Attachments.length; i++) {
            var ref = new RctApplication.RctAttachmentInit(data.Attachments[i]);
            this.Attachments.push(ref);
        }
        this.Articles = ko.observableArray([]);
        for (var i = 0; i < data.Articles.length; i++) {
            var ref = new RctApplication.RctArticleInit(data.Articles[i]);
            this.Articles.push(ref);
        }
        this.ExCurActivities = ko.observableArray([]);
        for (var i = 0; i < data.ExCurActivities.length; i++) {
            var ref = new RctApplication.RctExCurActivityInit(data.ExCurActivities[i]);
            this.ExCurActivities.push(ref);
        }

        this.Vsq = ko.observableArray([]);
        for (var i = 0; i < data.Vsq.length; i++) {
            var ref = new RctApplication.RctVsqInit(data.Vsq[i]);
            this.Vsq.push(ref);
        }

        this.OtherInfo = new RctApplication.RctOtherInfoInit(null);
        if (data.OtherInfo) {
            this.OtherInfo = new RctApplication.RctOtherInfoInit(data.OtherInfo);
        }

        RctApplication.Salutations(data.Salutations);
        RctApplication.Genders(data.Genders);
        RctApplication.CivilStatuses(data.CivilStatuses);
        RctApplication.Nationalities(data.Nationalities);
        RctApplication.Countries(data.Countries);
        RctApplication.Relationships(data.Relationships);
        RctApplication.QualifyTypes(data.QualifyTypes);
        RctApplication.Qualifications(data.Qualifications);
        RctApplication.StartYears(data.StartYears);
        RctApplication.FinishYears(data.FinishYears);
        RctApplication.Currencies(data.Currencies);
        RctApplication.AttachTypes(data.AttachTypes);
        RctApplication.ArticleCategories(data.ArticleCategories);
        RctApplication.ExCurCategories(data.ExCurCategories);
        RctApplication.ExCurActivityTypes(data.ExCurActivityTypes);
        RctApplication.Sources(data.Sources);
        RctApplication.Languages(data.Languages);
        RctApplication.LangRatings(data.LangRatings);
        RctApplication.SalutationList(data.SalutationList);
        RctApplication.ValidAge(data.ValidAge);
        RctApplication.MembershipTypes(data.MembershipTypes);
        RctApplication.Membership(data.Membership);
        RctApplication.MembershipTitles(data.MembershipTitles);
        RctApplication.Electorates(data.Electorates);
        RctApplication.Districts(data.Districts);
        RctApplication.Provinces(data.Provinces);
        RctApplication.DSDivisions(data.DSDivisions);
        RctApplication.GNDivisions(data.GNDivisions);
        RctApplication.Religions(data.Religions);
        RctApplication.Departments(data.Departments);

        if (data.IsEnableOtherQualifications) {
            RctApplication.AddOtherQualifications();
        }
    },
    RctPersonalInfoInit: function (item) {

        this.SaluCode = ko.observable(item.SaluCode);
        this.FirstName = ko.observable(item.FirstName);
        this.Surname = ko.observable(item.Surname);
        this.FullName = ko.observable(item.FullName);
        this.MiddleName = ko.observable(item.MiddleName);
        this.OtherName = ko.observable(item.OtherName);
        this.HouseNo = ko.observable(item.HouseNo);
        this.CurrentHouseNo = ko.observable(item.CurrentHouseNo);
        this.CurrentAparmentNo = ko.observable(item.CurrentAparmentNo);
        this.CurrentStreet1 = ko.observable(item.CurrentStreet1);
        this.CurrentStreet2 = ko.observable(item.CurrentStreet2);
        this.CurrentCity = ko.observable(item.CurrentCity);
        this.CurrentCountryCode = ko.observable(item.CurrentCountryCode);
        this.ApartmentNo = ko.observable(item.ApartmentNo);
        this.Street1 = ko.observable(item.Street1);
        this.Street2 = ko.observable(item.Street2);
        this.City = ko.observable(item.City);
        this.CountryCode = ko.observable(item.CountryCode ? item.CountryCode : RctApplication.DefaultCountry());
        this.Telephone = ko.observable(item.Telephone);
        this.Mobile = ko.observable(item.Mobile);
        this.Email = ko.observable(item.Email);
        this.IDNo = ko.observable(item.IDNo);
        this.DateOfBirth = ko.observable(RctToNullableJavaScriptDate(item.DateOfBirth));
        this.GenderCode = ko.observable(item.GenderCode);
        this.CivilStatusCode = ko.observable(item.CivilStatusCode);
        this.NationalityCode = ko.observable(item.NationalityCode);
        this.CountryOfOriginCode = ko.observable(item.CountryOfOriginCode);
        this.BlogPersonalWebsite = ko.observable(item.BlogPersonalWebsite);
        this.LinkedIn = ko.observable(item.LinkedIn);
        this.SkypeId = ko.observable(item.SkypeId);
        this.Facebook = ko.observable(item.Facebook);
        this.Twitter = ko.observable(item.Twitter);
        this.Designation = ko.observable(item.Designation);
        this.Department = ko.observable(item.Department);
        this.PresentSalaryGradeName = ko.observable(item.PresentSalaryGradeName);
        this.OfficeExtension = ko.observable(item.OfficeExtension);
        if (item.DateJoined != null) {
            this.DateJoined = ko.observable(item.DateJoined.split(' ')[0]);
        }
        this.PlaceOfBirth = ko.observable(item.PlaceOfBirth);
        //this.Initials = ko.observable(item.Initials);
        this.NameInitials = ko.observable(item.NameInitials);
        this.Age = ko.computed(function () {
            var today = new Date();
            var birthDate = this.DateOfBirth();
            if (birthDate != null) {
                var age = today.getFullYear() - birthDate.getFullYear();
                var m = today.getMonth() - birthDate.getMonth();
                if (m < 0 || (m === 0 && today.getDate() < birthDate.getDate())) {
                    age--;
                }
            }
            return age;
        }, this);
        this.ElectorateCode = ko.observable(item.ElectorateCode);
        this.DistrictCode = ko.observable(item.DistrictCode);
        this.ProvinceCode = ko.observable(item.ProvinceCode);
        this.DSDivisionCode = ko.observable(item.DSDivisionCode);
        this.GNDivisionCode = ko.observable(item.GNDivisionCode);
        this.ReligionCode = ko.observable(item.ReligionCode);
        this.DepartmentCode = ko.observable(item.DepartmentCode);
        this.IsCurrentAddress = ko.observable(item ? item.IsCurrentAddress : false);
    },
    RctDependentInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;
        this.RelationId = ko.observable(item ? item.RelationId : null);
        this.AppId = ko.observable(item ? item.AppId : null);
        this.Name = ko.observable(item ? item.Name : null);
        this.RelationCode = ko.observable(item ? item.RelationCode : null);
        if (fromJsObj) {
            this.DateOfBirth = ko.observable(item ? item.DateOfBirth : null);
        } else {
            this.DateOfBirth = ko.observable(item ? RctToJavaScriptDate(item.DateOfBirth) : null);
        }

        this.PlaceOfBirth = ko.observable(item ? item.PlaceOfBirth : null);
        this.GenCode = ko.observable(item ? item.GenCode : null);
        this.Gender = ko.observable(item ? item.Gender : null);
        this.NatCode = ko.observable(item ? item.NatCode : null);
        this.Telephone = ko.observable(item ? item.Telephone : null);
        this.HomeAddress = ko.observable(item ? item.HomeAddress : null);
        this.Occupation = ko.observable(item ? item.Occupation : null);
        this.WorkAddress = ko.observable(item ? item.WorkAddress : null);
        this.WorkTelephone = ko.observable(item ? item.WorkTelephone : null);
        this.SchoolUniversity = ko.observable(item ? item.SchoolUniversity : null);
        this.IDNo = ko.observable(item ? item.IDNo : null);
        this.Comments = ko.observable(item ? item.Comments : null);

        this.DateOfBirthDisp = ko.computed(function () {
            var ret = RctGetFormattedDate(this.DateOfBirth(), RCTAppDateFormat);
            return ret;
        }, this);
    },
    RctEduQlfInit: function (item) {

        this.QlfTypeCode = ko.observable(item ? item.QlfTypeCode : null);
        this.QlfCode = ko.observable(item ? item.QlfCode : null);
        if (item && item.QlfCode == "Other") {
            this.Qualification = ko.observable(item ? item.QlfCode : null);
            this.OtherQualification = ko.observable(item ? item.OtherQualification : null);
        } else {
            this.Qualification = ko.observable(item ? item.Qualification : null);
            this.OtherQualification = ko.observable(null);
        }
        this.UniversityInstitute = ko.observable(item ? item.UniversityInstitute : null);
        this.StartYear = ko.observable(item ? item.StartYear : null);
        this.CompletionYear = ko.observable(item ? item.CompletionYear : null);
        this.IsKeyQlf = ko.observable(item ? item.IsKeyQlf : false);
        this.IsKeyQlfDesc = ko.observable(item ? item.IsKeyQlfDesc : null);
        this.Subjects = ko.observableArray([]);
        if (item) {
            for (var i = 0; i < item.Subjects.length; i++) {
                var subject = new RctApplication.RctSubjectInit(item.Subjects[i]);
                this.Subjects.push(subject);
            }
        }
        this.IsKeyQlfDisp = ko.computed(function () {
            var ret = RctGetDisplayTextForBool(this.IsKeyQlf());
            return ret;
        }, this);
    },
    RctSubjectInit: function (item) {
        this.QlfCode = ko.observable(item ? item.QlfCode : null);
        this.SubjectCode = ko.observable(item ? item.SubjectCode : null);
        this.Subject = ko.observable(item ? item.Subject : null);
        this.SubjGradeCode = ko.observable(item ? item.SubjGradeCode : null);
        this.SubjGrade = ko.observable(item ? item.SubjGrade : null);
    },
    RctLangProficiencyInit: function (item) {
        this.LangCode = ko.observable(item ? item.LangCode : null);
        this.Language = ko.observable(item ? item.Language : null);
        this.ReadCode = ko.observable(item ? item.ReadCode : null);
        this.ReadGrade = ko.observable(item ? item.ReadGrade : null);
        this.WriteCode = ko.observable(item ? item.WriteCode : null);
        this.WriteGrade = ko.observable(item ? item.WriteGrade : null);
        this.SpeakCode = ko.observable(item ? item.SpeakCode : null);
        this.SpeakGrade = ko.observable(item ? item.SpeakGrade : null);
    },
    RctWorkExpInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;

        this.WrkExpId = ko.observable(item ? item.WrkExpId : null);
        if (fromJsObj) {
            this.StartDate = ko.observable(item ? item.StartDate : null);
            this.EndDate = ko.observable(item ? item.EndDate : null);
        } else {
            this.StartDate = ko.observable(item ? RctToJavaScriptDate(item.StartDate) : null);
            this.EndDate = ko.observable(item ? RctToJavaScriptDate(item.EndDate) : null);
        }
        this.Company = ko.observable(item ? item.Company : null);
        this.Designation = ko.observable(item ? item.Designation : null);
        this.SalaryOnLeaving = ko.observable(item ? item.SalaryOnLeaving : null);
        this.SOLCurrencyCode = ko.observable(item ? item.SOLCurrencyCode : null);
        this.ContactPerson = ko.observable(item ? item.ContactPerson : null);
        this.ContactPersonPhone = ko.observable(item ? item.ContactPersonPhone : null);
        this.KeyResponsibilities = ko.observable(item ? item.KeyResponsibilities : null);
        this.StartDateDisp = ko.computed(function () {
            var ret = RctGetFormattedDate(this.StartDate(), RCTAppDateFormat);
            return ret;
        }, this);
        this.EndDateDisp = ko.computed(function () {
            var ret = RctGetFormattedDate(this.EndDate(), RCTAppDateFormat);
            return ret;
        }, this);
    },
    RctMembershipDetailsInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;

        this.MembershipId = ko.observable(item ? item.MembershipId : null);
        this.MembershipTypeId = ko.observable(item ? item.MembershipTypeId : null);
        this.Membership = ko.observable(item ? item.Membership : null);
        this.MembershipTypeName = ko.observable(item ? item.MembershipTypeName : null);
        this.MembershipTitleId = ko.observable(item ? item.MembershipTitleId : null);
        if (fromJsObj) {
            this.CommencementDate = ko.observable(item ? item.CommencementDate : null);
            this.RenewalDate = ko.observable(item ? item.RenewalDate : null);
        } else {
            this.CommencementDate = ko.observable(item ? RctToJavaScriptDate(item.CommencementDate) : null);
            this.RenewalDate = ko.observable(item ? RctToJavaScriptDate(item.RenewalDate) : null);
        }
        this.NoOfMemberships = ko.observable(item ? item.NoOfMemberships : null);
        this.MembershipNo = ko.observable(item ? item.MembershipNo : null);
        this.SubscriptionOwnership = ko.observable(item ? item.SubscriptionOwnership : null);
        this.NoOfMemberships = ko.observable(item ? item.NoOfMemberships : null);
        this.MembershipNo = ko.observable(item ? item.MembershipNo : null);

        this.CommencementDateDisp = ko.computed(function () {
            var ret = RctGetFormattedDate(this.CommencementDate(), RCTAppDateFormat);
            return ret;
        }, this);
        this.RenewalDateDisp = ko.computed(function () {
            var ret = RctGetFormattedDate(this.RenewalDate(), RCTAppDateFormat);
            return ret;
        }, this);
    },
    RctRefereeInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;

        this.RefId = ko.observable(item ? item.RefId : null);
        this.Name = ko.observable(item ? item.Name : null);
        this.Organisation = ko.observable(item ? item.Organisation : null);
        this.Position = ko.observable(item ? item.Position : null);
        this.ContactNo = ko.observable(item ? item.ContactNo : null);
        this.Email = ko.observable(item ? item.Email : null);
        this.OfficialAddress = ko.observable(item ? item.OfficialAddress : null);
    },
    RctAttachmentInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;

        this.Id = ko.observable(item ? item.Id : null);
        this.AttachmentId = ko.observable(item ? item.AttachmentId : null);
        this.Name = ko.observable(item ? item.Name : null);
        this.DocTypeCode = ko.observable(item ? item.DocTypeCode : null);
        this.DocType = ko.observable(item ? item.DocType : null);
        this.InFile = ko.observable(null);
        this.DisplayVideoInfo = ko.observable(false);

        if (this.AttachmentId() == null) {
            this.AttachmentId(0);
        }
    },
    RctArticleInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;

        this.ArticleId = ko.observable(item ? item.ArticleId : null);
        this.CategoryId = ko.observable(item ? item.CategoryId : null);
        this.Category = ko.observable(item ? item.Category : null);
        this.DocumentNo = ko.observable(item ? item.DocumentNo : null);
        this.Description = ko.observable(item ? item.Description : null);
        this.CountryCode = ko.observable(item ? item.CountryCode : null);
        this.Country = ko.observable(item ? item.Country : null);
        this.NoOfEntries = ko.observable(item ? item.NoOfEntries : 0);
        this.PlaceOfIssue = ko.observable(item ? item.PlaceOfIssue : null);
        this.Comments = ko.observable(item ? item.Comments : null);
        if (fromJsObj) {
            this.DateOfIssue = ko.observable(item ? item.DateOfIssue : null);
            this.DateOfExpiry = ko.observable(item ? item.DateOfExpiry : null);
        } else {
            this.DateOfIssue = ko.observable(item && item.DateOfIssue ? RctToJavaScriptDate(item.DateOfIssue) : null);
            this.DateOfExpiry = ko.observable(item && item.DateOfExpiry ? RctToJavaScriptDate(item.DateOfExpiry) : null);
        }
        this.DateOfIssueDisp = ko.computed(function () {
            var ret = RctGetFormattedDate(this.DateOfIssue(), RCTAppDateFormat);
            return ret;
        }, this);
        this.DateOfExpiryDisp = ko.computed(function () {
            var ret = RctGetFormattedDate(this.DateOfExpiry(), RCTAppDateFormat);
            return ret;
        }, this);
    },
    RctExCurActivityInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;
        this.ExCurId = ko.observable(item ? item.ExCurId : null);
        this.Category = ko.observable(item ? item.Category : null);
        this.CategoryCode = ko.observable(item ? item.CategoryCode : null);
        this.ActivityType = ko.observable(item ? item.ActivityType : null);
        this.ActivityTypeCode = ko.observable(item ? item.ActivityTypeCode : null);
        this.Achievement = ko.observable(item ? item.Achievement : null);
    },
    RctOtherInfoInit: function (item, fromJsObj) {

        fromJsObj = fromJsObj || false;
        this.SourceCode = ko.observable(item ? item.SourceCode : null);
        this.InterestedAreas = ko.observableArray([]);
        if (item && item.InterestedAreas && item.InterestedAreas.length > 0) {
            for (var i = 0; i < item.InterestedAreas.length; i++) {
                this.InterestedAreas.push(new RctApplication.RctInterestedAreaInit(item.InterestedAreas[i]));
            }
        }
        this.PrivacyStatementAccepted = ko.observable(item ? item.PrivacyStatementAccepted : false);
        this.LawConvicted = ko.observable(item ? item.LawConvicted : 0);
        this.LawConvictedDesc = ko.observable(item ? item.LawConvictedDesc : null);
        this.AppliedBefore = ko.observable(item ? item.AppliedBefore : 0);
        this.AppliedBeforePosition = ko.observable(item ? item.AppliedBeforePosition : 0);
        this.AppliedBeforeDesc = ko.observable(item ? item.AppliedBeforeDesc : 0);
        this.ActivityType = ko.observable(item ? item.ActivityType : null);

        this.TextAreaField1 = ko.observable(item ? item.TextAreaField1 : null);
        this.TextAreaField2 = ko.observable(item ? item.TextAreaField2 : null);
        this.TextAreaField3 = ko.observable(item ? item.TextAreaField3 : null);
        this.TextAreaField4 = ko.observable(item ? item.TextAreaField4 : null);
        this.TextAreaField5 = ko.observable(item ? item.TextAreaField5 : null);
        this.TextAreaField6 = ko.observable(item ? item.TextAreaField6 : null);
        this.TextAreaField7 = ko.observable(item ? item.TextAreaField7 : null);
        this.TextAreaField8 = ko.observable(item ? item.TextAreaField8 : null);
        this.TextAreaField9 = ko.observable(item ? item.TextAreaField9 : null);
        this.TextAreaField10 = ko.observable(item ? item.TextAreaField10 : null);
        this.WorkShopAndTrainings = ko.observable(item ? item.WorkShopAndTrainings : null);
        this.ExperiencedToolsDesc = ko.observable(item ? item.ExperiencedToolsDesc : null);
        this.IntField1 = ko.observable(item ? item.IntField1 : 0);
        this.IntField2 = ko.observable(item ? item.IntField2 : 0);
        this.WorkedBefore = ko.observable(item ? item.WorkedBefore : false);
        this.IsFresherForWork = ko.observable(item ? item.IsFresherForWork : false);
        this.ExpectedSalary = ko.observable(item ? item.ExpectedSalary : null);
        this.ESCurrencyCode = ko.observable(item ? item.ESCurrencyCode : null);

        if (fromJsObj) {
            this.AppliedBeforeDate = ko.observable(item ? item.AppliedBeforeDate : null);
        } else {
            this.AppliedBeforeDate = ko.observable(item && item.AppliedBeforeDate ? RctToJavaScriptDate(item.AppliedBeforeDate) : null);
        }
        this.AppliedBeforeDateDisp = ko.computed(function () {
            var ret = RctGetFormattedDate(this.AppliedBeforeDate(), RCTAppDateFormat);
            return ret;
        }, this);

        this.ScoreCardList = ko.observableArray([]);
        if (item && item.ScoreCardList && item.ScoreCardList.length > 0) {
            for (var i = 0; i < item.ScoreCardList.length; i++) {
                this.ScoreCardList.push(new RctApplication.RctNTBScorecardInit(item.ScoreCardList[i]));
            }
        }
    },
    RctInterestedAreaInit: function (item, fromJsObj) {

        fromJsObj = fromJsObj || false;
        this.Code = ko.observable(item ? item.Code : null);
        this.Name = ko.observable(item ? item.Name : null);
        this.Desc = ko.observable(item ? item.Desc : null);
        this.Selected = ko.observable(item ? item.Selected : false);
    },
    RctNTBScorecardInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;
        this.ScoreCardYear = ko.observable(item ? item.ScoreCardYear : null);
        this.ScoreCardLifeCycleMandotory = ko.observable(item ? item.ScoreCardLifeCycleMandotory : null);
        this.ScoreCardLifeCycleSoftSkills = ko.observable(item ? item.ScoreCardLifeCycleSoftSkills : null);
        this.ScoreCardLifeCycleTechnical = ko.observable(item ? item.ScoreCardLifeCycleTechnical : null);
        this.ScoreCardLetterCommendation = ko.observable(item ? item.ScoreCardLetterCommendation : null);
        this.ScoreCardLeanBeltCertify = ko.observable(item ? item.ScoreCardLeanBeltCertify : 0);
        this.ScoreCardWarningLetters = ko.observable(item ? item.ScoreCardWarningLetters : 0);
        this.ScoreCardPerformanceRatting = ko.observable(item ? item.ScoreCardPerformanceRatting : null);

        this.LeanBeltList = ko.observableArray([]);

        if (item && item.LeanBeltList && item.LeanBeltList.length > 0) {
            for (var i = 0; i < item.LeanBeltList.length; i++) {
                this.LeanBeltList.push(new RctApplication.RctNTBLeanBeltInit(item.LeanBeltList[i]));
            }
        }
        this.WarningAnswerList = ko.observableArray([
            new RctApplication.RctNTBWarningAnswerInit(1, "Yes"),
            new RctApplication.RctNTBWarningAnswerInit(2, "No"),
        ])
    },
    RctNTBLeanBeltInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;
        this.LeanBeltID = ko.observable(item ? item.LeanBeltID : null);
        this.LeanBeltName = ko.observable(item ? item.LeanBeltName : null);

    },
    RctNTBLeanBeltInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;
        this.LeanBeltID = ko.observable(item ? item.LeanBeltID : null);
        this.LeanBeltName = ko.observable(item ? item.LeanBeltName : null);

    },
    RctNTBWarningAnswerInit: function (ansID, answer) {
        this.Key = ko.observable(ansID);
        this.AnsText = ko.observable(answer);

    },
    RctVsqInit: function (item, fromJsObj) {
        fromJsObj = fromJsObj || false;
        this.QuestionId = ko.observable(item ? item.QuestionId : 0);
        this.QuestionKey = ko.observable(item ? item.QuestionKey : null);
        this.QuestionName = ko.observable(item ? item.QuestionName : null);
        this.TypeId = ko.observable(item ? item.TypeId : 0);
        this.Order = ko.observable(item ? item.Order : 0);
        this.TypeName = ko.observable(item ? item.TypeName : null);
        this.Answer = ko.observable(item ? item.Answer : null);
        this.StrValue = ko.observable(item ? item.StrValue : null);
        this.DateValue = ko.observable(item ? RctToNullableJavaScriptDate(item.DateValue) : null);
        this.TypeData = ko.observable(item ? item.TypeData : null);
        this.TypeDataList = ko.observableArray(item ? item.TypeDataList : []);
        this.TypeDataList(item ? item.TypeDataList : []);
    },
    BrowseCV: function () {
        $('#RctAppPerUploadCV').val('');
        $('#RctAppPerUploadCV').trigger('click');
    },
    CVSelected: function (elemet, event) {

        var files = event.target.files;// FileList object
        if (files.length > 0) {
            var file = files[0];
            var size = file.size;
            var extension = file.name.substr((file.name.lastIndexOf('.') + 1)).toString().toLowerCase();
            var types = $("#rctHdnCVTypes").val().toString().toLowerCase();
            var allowsize = $("#rctHdnCVize").val() * (1024 * 1024);
            if (size > allowsize) {
                var msg = RctGetResourceFileSizeFrom(RctApplication.GetHost(), types, (allowsize / (1024 * 1024)));
                RctApplication.ShowRctAppMessage("error", msg);
                $('#RctAppPerUploadCV').val('');
            } else if (types.indexOf(extension) < 0) {
                var msg = RctGetResourceFileSizeFrom(RctApplication.GetHost(), types, (allowsize / (1024 * 1024)));
                RctApplication.ShowRctAppMessage("error", msg);
                $('#RctAppPerUploadCV').val('');
            } else {
                RctApplication.CV(file);
                if ($('#rctHdnCvParserEnabled').val() == 1) {
                    if ($('#rctHdnCvParserMode').val() == "Base" && extension == "pdf") {
                        RctApplication.ParseCV();
                    } else if ($('#rctHdnCvParserMode').val() == "Daxtra") {
                        RctApplication.ParseCV();
                    }
                }
            }
        }
        RctApplication.ItemOnBlur('RctAppPerUploadCV');
    },
    DownloadCV: function () {
        if (RctApplication.Current().CV()) {
            var id = RctApplication.Current().CV().Id();
            if (id) {
                var url = RctApplication.GetPath("/Common/DownloadCV?appId=" + id);
                RctDownloadFile(url);
            }
        }
    },
    ParseCV: function () {

        $('#app-cv-processing').attr("style", "margin-top: 8px");
        $('#app-cv-processing').show();
        var data = new FormData();
        data.append("files", RctApplication.CV());
        var url = RctApplication.GetPath("CvParser/ExtractCV");

        $.ajax({
            url: url,
            type: 'POST',
            data: data,
            cache: false,
            processData: false,
            contentType: false
        }).done(function (data, textStatus, jqXHR) {
            if (data.IsSuccessfull) {
                //RctApplication.RctAppMessage("info", data.Message);  
                if (data.Data.Name && !RctApplication.Current().PersonalInfo().FullName()) {
                    RctApplication.Current().PersonalInfo().FullName(data.Data.Name);
                    $("#RctAppPerFullName").blur();
                }
                if (data.Data.FirstName && !RctApplication.Current().PersonalInfo().FirstName()) {
                    RctApplication.Current().PersonalInfo().FirstName(data.Data.FirstName);
                    $("#RctAppPerFirstName").blur();
                }
                if (data.Data.LastName && !RctApplication.Current().PersonalInfo().Surname()) {
                    RctApplication.Current().PersonalInfo().Surname(data.Data.LastName);
                    $("#RctAppPerSurname").blur();
                }
                if (data.Data.Email && !RctApplication.Current().PersonalInfo().Email()) {
                    RctApplication.Current().PersonalInfo().Email(data.Data.Email);
                    $("#RctAppPerEmail").blur();
                }
                if (data.Data.MobileNumber && !RctApplication.Current().PersonalInfo().Mobile()) {
                    RctApplication.Current().PersonalInfo().Mobile(data.Data.MobileNumber);
                    $("#RctAppPerMobile").blur();
                }
                if (data.Data.Telephone && !RctApplication.Current().PersonalInfo().Telephone()) {
                    RctApplication.Current().PersonalInfo().Telephone(data.Data.Telephone);
                    $("#RctAppPerTelephone").blur();
                }
                if (data.Data.Address01 && !RctApplication.Current().PersonalInfo().HouseNo()) {
                    RctApplication.Current().PersonalInfo().HouseNo(data.Data.Address01);
                    $("#RctAppPerHouseNo").blur();
                }
                if (data.Data.Address04 && !RctApplication.Current().PersonalInfo().ApartmentNo()) {
                    RctApplication.Current().PersonalInfo().ApartmentNo(data.Data.Address04);
                    $("#RctAppPerApartmentNo").blur();
                }
                if (data.Data.Address02 && !RctApplication.Current().PersonalInfo().Street1()) {
                    RctApplication.Current().PersonalInfo().Street1(data.Data.Address02);
                    $("#RctAppPerStreet1").blur();
                }
                if (data.Data.Address03 && !RctApplication.Current().PersonalInfo().Street2()) {
                    RctApplication.Current().PersonalInfo().Street2(data.Data.Address03);
                    $("#RctAppPerStreet2").blur();
                }
                if (data.Data.NIC && !RctApplication.Current().PersonalInfo().IDNo()) {
                    RctApplication.Current().PersonalInfo().IDNo(data.Data.NIC);
                    $("#RctAppPerIDNo").blur();
                }
                if (data.Data.GenderCode != -1 && !RctApplication.Current().PersonalInfo().GenderCode()) {
                    RctApplication.Current().PersonalInfo().GenderCode(data.Data.GenderCode);
                }
                var dob = RctToNullableJavaScriptDate(data.Data.DOB);
                if (dob && !RctApplication.Current().PersonalInfo().DateOfBirth()) {
                    RctApplication.Current().PersonalInfo().DateOfBirth(dob);
                }
                if (data.Data.LinkedIn && !RctApplication.Current().PersonalInfo().LinkedIn()) {
                    RctApplication.Current().PersonalInfo().LinkedIn(data.Data.LinkedIn);
                    $("#RctAppPerLinkedInProfile").blur();
                }
                if (data.Data.Skype && !RctApplication.Current().PersonalInfo().SkypeId()) {
                    RctApplication.Current().PersonalInfo().SkypeId(data.Data.Skype);
                    $("#RctAppPerSkypeId").blur();
                }
                if (data.Data.Facebook && !RctApplication.Current().PersonalInfo().Facebook()) {
                    RctApplication.Current().PersonalInfo().Facebook(data.Data.Facebook);
                    $("#RctAppPerFacebook").blur();
                }
                if (data.Data.Twitter && !RctApplication.Current().PersonalInfo().Twitter()) {
                    RctApplication.Current().PersonalInfo().Twitter(data.Data.Twitter);
                    $("#RctAppPerTwitter").blur();
                }

                //Education Qualifications
                if (data.Data.EduQualifications.length > 0 && RctApplication.Current().EduQualifications().length == 0) {
                    for (var i = 0; i < data.Data.EduQualifications.length; i++) {
                        RctApplication.Current().EduQualifications.push(new RctApplication.RctEduQlfInit(data.Data.EduQualifications[i]));
                        RctApplication.ResetEduQlf();
                    }
                }

                //Work Experiences                
                if (data.Data.WorkExperiances.length > 0 && RctApplication.Current().WorkExperiances().length == 0) {
                    for (var i = 0; i < data.Data.WorkExperiances.length; i++) {
                        RctApplication.Current().WorkExperiances.push(new RctApplication.RctWorkExpInit(data.Data.WorkExperiances[i]));
                        RctApplication.ResetWorkExp();
                    }
                }

                //Referees
                if (data.Data.Referees.length > 0 && RctApplication.Current().Referees().length == 0) {
                    for (var i = 0; i < data.Data.Referees.length; i++) {
                        data.Data.Referees[i].RefId = i + 1;
                        RctApplication.Current().Referees.push(new RctApplication.RctRefereeInit(data.Data.Referees[i]));
                        RctApplication.ResetReferee();
                    }
                }

            } else {
                //RctApplication.RctAppMessage("error", data.Message);
            }
            $('#app-cv-processing').hide();
        }).fail(function (jqXHR, textStatus, errorThrown) {
            $('#app-cv-processing').hide();
            RctApplication.ShowRctAppError(jqXHR, textStatus, errorThrown);
        })

    },
    BrowseAppImage: function () {
        $('#RctAppPerEmpImage').val('');
        $('#RctAppPerEmpImage').trigger('click');
    },
    AppImageSelected: function (elemet, event) {
        var files = event.target.files;// FileList object
        if (files.length > 0) {
            var file = files[0];
            var size = file.size;
            var extension = file.name.substr((file.name.lastIndexOf('.') + 1)).toString().toLowerCase();
            var types = $("#rctHdnAttachmentValidImageTypes").val().toString().toLowerCase();
            var allowsize = $("#rctHdnAttachmentMaxProfImageSize").val() * (1024 * 1024);
            if (size > allowsize) {
                var msg = RctGetResourceFileSizeFrom(RctApplication.GetHost(), types, (allowsize / (1024 * 1024)));
                RctApplication.ShowRctAppMessage("error", msg);
                $('#RctAppPerEmpImage').val('');
            } else if (types.indexOf(extension) < 0) {
                var msg = RctGetResourceFileSizeFrom(RctApplication.GetHost(), types, (allowsize / (1024 * 1024)));
                RctApplication.ShowRctAppMessage("error", msg);
                $('#RctAppPerEmpImage').val('');
            } else {
                RctApplication.AppImage(file);
                var reader = new FileReader();
                // Closure to capture the file information.
                reader.onload = (function (theFile) {
                    return function (e) {
                        // Render thumbnail.
                        var thumb = e.target.result;
                        $('#RctAppPerEmpImageImg').attr('src', thumb);
                    };
                })(file);
                // Read in the image file as a data URL.
                reader.readAsDataURL(file);
            }
        }
        RctApplication.ItemOnBlur('RctAppPerAppImage');
    },
    ItemOnBlur: function (id) {
        if (id == "RctNtbDecAppliedBefore") {
            var currentVal = RctApplication.Current().OtherInfo.AppliedBefore();
            var ids = ['#RctNtbDecAppliedBeforeDate', '#RctNtbDecAppliedBeforePosition', '#RctNtbDecAppliedBeforeDesc'];
            if (currentVal != 1) {
                for (var i = 0; i < ids.length; i++) {
                    $(ids[i]).val(null);
                }
            }
        } else if (id == "RctNtbDecLaw") {
            var currentVal = RctApplication.Current().OtherInfo.LawConvicted();
            var ids = ['#RctNtbDecLawConvictedDesc'];
            if (currentVal != 1) {
                for (var i = 0; i < ids.length; i++) {
                    $(ids[i]).val(null);
                }
            }
        } else if (id == "RctAppAttDocumentType") {
            var videoTypeCode = $("#rctHdnAttachmentVideoTypeCode").val().toString();
            if (RctApplication.CurrentAttachment().DocTypeCode() == videoTypeCode) {
                RctApplication.CurrentAttachment().DisplayVideoInfo(true);
            }
            else {
                RctApplication.CurrentAttachment().DisplayVideoInfo(false);
            }
        }

        RctApplication.ValidateItem(id, "false");
        RctApplication.UpdateProfileCompleteness();
        return true;
    },
    ValidateItem: function (inId, silent) {
        silent = silent || "false";
        var id = '#' + inId;
        var val = $(id).val();
        var lbl = $(id).data('rct-label');
        var type = $(id).data('rct-type');
        var errorId = id + "RctError";
        var required = $(id).data('rct-required');
        var validation = $(id).data('rct-val');
        var len = $(id).data('rct-length');
        if (silent == "false") {
            $(errorId).html("");
            $(errorId).hide();
        }

        if (type == "CheckBox") {
            val = $(id).is(":checked")
        }

        var isValid = true;
        if (inId == 'RctAppPerPreferredName') {
            required = true;
            lbl = $('#RctAppPerSaluCode').data('rct-label');
            if ($("#RctAppPerSaluCode").val() && $("#RctAppPerFirstName").val()) {
                val = $("#RctAppPerSaluCode").val() + $("#RctAppPerFirstName").val();
            }
        } else if (inId == "RctAppPerUploadCV") {
            if (RctApplication.CV() != null) {
                val = "FINE";
            }
        } else if (inId == "RctAppWrkSalaryonLeaving") {
            if (RctApplication.CurrentWorkExp() &&
                (RctApplication.CurrentWorkExp().SalaryOnLeaving() && !RctApplication.CurrentWorkExp().SOLCurrencyCode())) {
                RctApplication.SetItemError(errorId, "Please select currency");
                return false;
            }
        } else if (inId == "RctAppAttDocument") {
            if (RctApplication.CurrentAttachment().InFile() != null) {
                val = "FINE";
            }
        } else if (inId == "RctAppOtrExpectedSalary") {
            if (RctApplication.Current().OtherInfo.ExpectedSalary() && !RctApplication.Current().OtherInfo.ESCurrencyCode()) {
                RctApplication.SetItemError(errorId, "Please select currency");
                return false;
            }
        }

        if (required == true) {
            // bypass hidden items 
            if ($(id).is(":visible") == false && inId != "RctAppPerPreferredName") {
                return true;
            }
            if (type != "CheckBox") {
                if (!val || val == null) {
                    isValid = false;
                    if (silent == "false") {
                        RctApplication.SetItemError(errorId, lbl + " is required");
                    }
                }
            }
        }

        if (isValid == true) {
            isValid = RctApplication.ValidateWithString(id, lbl, type, validation, val, len, errorId, silent);
        }

        return isValid;
    },
    ValidateWithString: function (id, lbl, type, validation, val, len, errorId, silent) {
        silent = silent || "false";
        if (validation) {
            // Return if empty
            if (type != "CheckBox") {
                if (val != true && !val) {
                    return true;
                }
            }

            var res = validation.split(",");
            for (var i = 0; i < res.length; i++) {
                var valItem = res[i].trim().toLowerCase();
                if (valItem == "length") {
                    if (val.length > len) {
                        if (silent == "false") {
                            RctApplication.SetItemError(errorId, lbl + ": Value is too long (" + val.length + " character(s)). Maximum allowed " + len + " charachter(s)");
                        }
                        return false;
                    }
                } else if (valItem == "nic") { //NIC Validation for Sri Lanka
                    if (!(val.length == 10 || val.length == 12)) {
                        if (silent == "false") {
                            RctApplication.SetItemError(errorId, lbl + ": Must be a valid NIC Number");
                        }
                        return false;
                    }
                    var nic10regx = RegExp("^[0-9]{9}[V|X|v|x]{1}$");
                    var nic12regx = RegExp("^[0-9]{12}$");
                    if (!(nic10regx.test(val) || nic12regx.test(val))) {
                        RctApplication.SetItemError(errorId, lbl + ": Must be a valid NIC Number");
                        return false;
                    }
                } else if (valItem == "nic_ken") { //NIC Validation for Kenya
                    if (val.length > 20) {
                        if (silent == "false") {
                            RctApplication.SetItemError(errorId, lbl + ": Must be a valid NIC Number");
                        }
                        return false;
                    }
                    var nic_ken_regx = RegExp("^[0-9]*$");
                    if (!(nic_ken_regx.test(val))) {
                        RctApplication.SetItemError(errorId, lbl + ": Must be a valid NIC Number");
                        return false;
                    }
                } else if (valItem == "email") {
                    var regexEmail = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
                    if (!regexEmail.test(val)) {
                        if (silent == "false") {
                            RctApplication.SetItemError(errorId, lbl + ": Must be a valid Email");
                        }
                        return false;
                    }
                } else if (valItem == "phone") {
                    var regexPhone = new RegExp('^([\\+]?\\d[\\s\\-\\.]*){8,20}\\d$');
                    if (!regexPhone.test(val)) {
                        if (silent == "false") {
                            RctApplication.SetItemError(errorId, lbl + ": Must be a valid Phone Number");
                        }
                        return false;
                    }
                } else if (valItem == "price") {
                    var regexPrice = /^\d+(?:\.{0,1}\d{0,2})$/;
                    if (!regexPrice.test(val)) {
                        if (silent == "false") {
                            RctApplication.SetItemError(errorId, lbl + ": Must be a valid decimal number with maximum 2 fractional digits");
                        }
                        return false;
                    }
                } else if (valItem == "booltrue") {
                    if (!(val == true)) {
                        if (silent == "false") {
                            RctApplication.SetItemError(errorId, lbl + ": Must be checked");
                        }
                        return false;
                    }
                }
            }
        }

        return true;
    },
    SetItemError: function (errorId, msg) {
        $(errorId).html(msg);
        $(errorId).show();
    },
    ClearItemError: function (errorId) {
        $(errorId).html("");
    },
    Save: function () {
        $("#btnAppSave").attr("disabled", true);
        var valid = RctApplication.ValidateItems();
        if (valid == true) {
            var objData = ko.toJSON(RctApplication.Current());
            var data = new FormData();
            data.append("objData", objData);
            if (RctApplication.CV() != null) {
                var cvName = RctApplication.CV().name;
                data.append("cv", cvName);
                data.append("files", RctApplication.CV());
            } else {
                data.append("cv", "");
            }

            if (RctApplication.AppImage() != null) {
                var appImageName = RctApplication.AppImage().name;
                data.append("appImageName", appImageName);
                data.append("files", RctApplication.AppImage());
            } else {
                data.append("appImageName", "");
            }

            for (var i = 0; i < RctApplication.Current().Attachments().length; i++) {
                data.append("files", (RctApplication.Current().Attachments()[i]).InFile());
            }

            var isProfile = $('#rctHdnIsProfile').val();
            var isLinkFromAlert = $('#rctHdnIsLinkFromAlert').val();
            data.append("isLinkFromAlert", isLinkFromAlert);
            var isAppliedViaLink = $('#rctHdnIsAppliedViaLink').val();
            data.append("isAppliedViaLink", isAppliedViaLink);
            var url = RctApplication.GetPath("Application/Save");
            $.ajax({
                url: url,
                type: 'POST',
                data: data,
                cache: false,
                processData: false,
                contentType: false
            }).done(function (data, textStatus, jqXHR) {
                if (data.IsSuccessfull) {
                    //RctApplication.RctAppMessage("info", data.Message);
                    var url = RctApplication.GetPath('Common/GetToken');
                    var q = RctGetTokenFromUrl(url, RctAppViewTokenName);
                    var jpid = $('#rctHdnJPAId').val();
                    if (jpid == "" || jpid == null) {
                        jpid = -1;
                    }

                    var url = RctApplication.GetPath(
                        'Application/View?reqId=' + $('#rctHdnReqId').val() +
                        '&appId=' + data.Data +
                        '&type=' + $('#rctHdnRecType').val() +
                        '&q=' + q +
                        '&jpid=' + jpid +
                        '&isProfile=' + isProfile);

                    swal(data.Message,
                        {
                            icon: "success",
                            buttons: {
                                cancel: "OK",
                            },
                        }).then(function (value) {
                            switch (value) {
                                default:
                                    RctApplication.RctMoveORClose(isProfile, url);
                            }
                        });
                } else {
                    $("#btnAppSave").attr("disabled", false);
                    RctApplication.RctAppMessage("error", data.Message);
                }
            }).fail(function (jqXHR, textStatus, errorThrown) {
                $("#btnAppSave").attr("disabled", false);
                RctApplication.ShowRctAppError(jqXHR, textStatus, errorThrown);
                $('#linkmailTo').html(RctGetResourceFrom(RctApplication.GetHost(), "RctApplicationNeedAssistanceHeader"));
            });
        } else {
            if (RctApplication.HasOtherItemError()) {
                var msg = "";
                var numberofRefrees = parseInt($("#hdnNumberOfRefrees").val());
                var type = $('#rctHdnRecType').val();
                var numberofRefreesExternal = parseInt($("#hdnValidateRefExternalUser").val());

                if (RctApplication.ValidateFailWorkExperience()) {
                    msg = RctGetResourceFrom(RctApplication.GetHost(), "RctErrorMessageValidateExperience");
                    RctApplication.RctAppMessage("error", msg);
                } else if (RctApplication.ValidateFailGenderSaluation()) {
                    msg = "Gender and Salutation is not matched.";
                    RctApplication.RctAppMessage("error", msg);
                } else if (RctApplication.ValidateFailMinimumAge()) {
                    msg = "Age should be greater than " + RctApplication.ValidAge();
                    RctApplication.RctAppMessage("error", msg);
                } else if (RctApplication.ValidateFailRefrees()) {
                    if (type == "External") {
                        msg = 'Please note at least ' + numberofRefreesExternal + ' referees must be entered';
                        RctApplication.RctAppMessage("error", msg);
                    } else {
                        msg = 'Please note at least ' + numberofRefrees + ' referees must be entered';
                        RctApplication.RctAppMessage("error", msg);
                    }
                } else if (RctApplication.ValidateFailFresherWork()) {
                    msg = 'Cannot add Work Experience if you are Fresher for Work';
                    RctApplication.RctAppMessage("error", msg);
                } else if (RctApplication.ValidateVsq()) {
                    msg = 'Please answer mandatory Vacancy Specific Questions!';
                    RctApplication.RctAppMessage("error", msg);
                }
            }
            else {
                RctApplication.RctAppMessage("error", "Please correct the errors and try again");
            }
            $("#btnAppSave").attr("disabled", false);
        }
    },

    RctMoveORClose: function (isProfile, url) {
        if (isProfile == 1) {
            window.close();
        } else {
            RctMoveToUrl(url);
        }
    },

    ValidateItems: function () {
        var validateRefrees = "0";
        var notValidateNoExperience = "0";
        var numberofRefrees = 0;
        var numberofRefreesExternal = 0;

        RctApplication.ValidateFailWorkExperience(false);
        RctApplication.ValidateFailRefrees(false);
        RctApplication.ValidateFailGenderSaluation(false);
        RctApplication.ValidateFailMinimumAge(false);
        RctApplication.ValidateFailFresherWork(false);
        RctApplication.ValidateVsq(false);
        notValidateNoExperience = $("#hdnValidateWhenNoExperience").val();
        validateRefrees = $("#hdnValidateRefrees").val();
        numberofRefrees = parseInt($("#hdnNumberOfRefrees").val());
        numberofRefreesExternal = parseInt($("#hdnValidateRefExternalUser").val());
        var type = $('#rctHdnRecType').val();

        var valid = true;
        var tempValid = true;
        var errorEle = { id: null, top: null };
        for (var i = 0; i < RctApplication.UserItems.length; i++) {
            var id = RctApplication.UserItems[i];
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
                if (id == "RctAppPerPreferredName") {
                    id = "RctAppPerFirstName";
                }
                errorEle = RctApplication.SetScrollTop(errorEle, id);
            }
        }

        var allItems = RctApplication.GetItemsToValidate('#RctAppPersonalInfoTab');
        allItems = allItems.concat(RctApplication.GetItemsToValidate('#RctAppOtherInformationTab'));
        allItems = allItems.concat(RctApplication.GetItemsToValidate('#RctNtbDeclarationTab'));
        allItems = allItems.concat(RctApplication.GetItemsToValidate('#RctNtbScoreCard'));

        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
                errorEle = RctApplication.SetScrollTop(errorEle, id);
            }
        }
        RctApplication.HasOtherItemError(valid);
        if (notValidateNoExperience == "1") {
            if (!RctApplication.Current().OtherInfo.WorkedBefore()) {
                if (RctApplication.Current().WorkExperiances().length == 0) {
                    valid = false;
                    id = "RctAppWorkExperienceTabTab"
                    errorEle = RctApplication.SetScrollTop(errorEle, id);
                    RctApplication.ValidateFailWorkExperience(true);
                }
            }
        }

        if (validateRefrees == "1") {
            if (RctApplication.Current().Referees().length != numberofRefrees) {
                valid = false;
                id = "RctAppRefereesTabTab"
                errorEle = RctApplication.SetScrollTop(errorEle, id);
                RctApplication.ValidateFailRefrees(true);
            }
        }

        // Referee count validation for External Application
        if (type == "External") {
            if (numberofRefreesExternal > 0) {
                if (RctApplication.Current().Referees().length < numberofRefreesExternal) {
                    valid = false;
                    id = "RctAppRefereesTabTab";
                    errorEle = RctApplication.SetScrollTop(errorEle, id);
                    RctApplication.ValidateFailRefrees(true);
                }
            }
        }

        // Validate Gender with Salutation
        var isValid = RctApplication.ValidateGenderWithSalutation(RctApplication.Current().PersonalInfo().GenderCode(), RctApplication.Current().PersonalInfo().SaluCode());
        if (isValid == false) {
            valid = false;
            id = "RctAppPersonalInfoTab";
            errorEle = RctApplication.SetScrollTop(errorEle, id);
            RctApplication.ValidateFailGenderSaluation(true);
        }

        // Minimum age validation with birthday
        if (RctApplication.Current().PersonalInfo().Age() < RctApplication.ValidAge()) {
            valid = false;
            id = "RctAppPersonalInfoTab";
            errorEle = RctApplication.SetScrollTop(errorEle, id);
            RctApplication.ValidateFailMinimumAge(true);
        }

        // Is Fresher for Work validation
        if (RctApplication.Current().OtherInfo.IsFresherForWork()) {
            if (RctApplication.Current().WorkExperiances().length > 0) {
                valid = false;
                id = "RctAppWorkExperienceTab";
                errorEle = RctApplication.SetScrollTop(errorEle, id);
                RctApplication.ValidateFailFresherWork(true);
            }
        }
        //validate questions
        for (var i = 0; i < RctApplication.Current().Vsq().length; i++) {
            var type = RctApplication.Current().Vsq()[i].TypeId();
            var value = RctApplication.Current().Vsq()[i].StrValue();
            if (type == 3 && (value == null || value == "")) {
                valid = false;
                id = "RctAppVsqTabTab"
                errorEle = RctApplication.SetScrollTop(errorEle, id);
                RctApplication.ValidateVsq(true);
            }
            if (type == 8 && (value == null || value == "")) {
                valid = false;
                id = "RctAppVsqTabTab"
                errorEle = RctApplication.SetScrollTop(errorEle, id);
                RctApplication.ValidateVsq(true);
            }
        }

        // Expected salary validation - Other Information
        var expectedSalary = RctApplication.Current().OtherInfo.ExpectedSalary();
        var esCurCode = RctApplication.Current().OtherInfo.ESCurrencyCode();

        if (expectedSalary != null && esCurCode == null) {
            valid = false;
            id = "RctAppOtherInformationTab"
            errorEle = RctApplication.SetScrollTop(errorEle, id);
        }
        else if (esCurCode != null && expectedSalary == null) {
            RctApplication.Current().OtherInfo.ESCurrencyCode(null);
        }

        if (errorEle.top != null) {
            $([document.documentElement, document.body]).animate({
                scrollTop: errorEle.top
            }, 1000, function () {
                document.getElementById(errorEle.id).focus();
            });

        }
        return valid;
    },
    GetItemsToValidate: function (eleId) {
        var items = [];
        if ($(eleId).length > 0) {
            var newitems = $(eleId).find("[data-rct-required='true'],[data-rct-required='false']");
            if (newitems && newitems.length > 0) {
                items = items.concat(newitems.toArray());
            }
        }
        return items;
    },
    SetScrollTop: function (errorEle, id) {
        if ($("#" + id).length > 0) {
            var tempTop = $("#" + id).offset().top;
            if (tempTop) {
                if (errorEle.top == null || tempTop < errorEle.top) {
                    return { id: id, top: tempTop };
                }
            }
        }
        return errorEle;
    },
    RctAppMessage: function (type, message, pTitle) {
        var title = "";
        if (pTitle) {
            title = pTitle;
        } else if (type == "error") {
            title = "ERROR!";
        } else if (type == "info") {
            title = "INFO!";
        } else if (type == "warning") {
            title = "WARNING!";
        } else if (type == "success") {
            title = "SUCCESS!";
        }
        swal({
            title: title,
            text: message,
            icon: type,
        });
    },
    ShowRctAppMessage: function (type, message) {
        if (message) {
            RctApplication.RctAppMessage(type, message);
        }
    },
    ShowRctAppError: function (jqXHR, textStatus, errorThrown) {
        if (jqXHR) {
            var errorMsg = jqXHR.responseText || textStatus;
            if (jqXHR.readyState != 0) {
                RctApplication.ShowRctAppMessage("error", errorMsg);
            }
        }
    },
    ValidateDependent: function () {
        var valid = true;
        var tempValid = true;
        var allItems = RctApplication.GetItemsToValidate('#RctAppDependentsTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        return valid;
    },
    GetNewDependentId: function () {
        var id = 1;
        for (var i = 0; i < RctApplication.Current().Dependents().length; i++) {
            var curId = RctApplication.Current().Dependents()[i].RelationId();
            if (id < curId) {
                id = curId;
            }
        }

        return id + 1;
    },
    SaveDependent: function () {
        var current = RctApplication.CurrentDependent();

        if (current) {
            var valid = RctApplication.ValidateDependent();
            if (valid == true) {
                current.Gender($("#RctAppDepGender option:selected").text());
                current.GenCode($("#RctAppDepGender option:selected").val());
                if (current.RelationId() == null) {
                    current.RelationId(RctApplication.GetNewDependentId());
                    RctApplication.Current().Dependents.push(current);
                    RctApplication.ResetDependent();
                } else {
                    for (var i = 0; i < RctApplication.Current().Dependents().length; i++) {
                        var curId = RctApplication.Current().Dependents()[i].RelationId();
                        if (current.RelationId() == curId) {
                            RctApplication.Current().Dependents.replace(RctApplication.Current().Dependents()[i], current);
                            RctApplication.ResetDependent();
                            return;
                        }
                    }
                }
            }
        }
    },
    ResetDependent: function () {
        var allItems = RctApplication.GetItemsToValidate('#RctAppDependentsTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            var errorId = id + "RctError";
            RctApplication.ClearItemError(errorId);
        }
        RctApplication.CurrentDependent(new RctApplication.RctDependentInit(null));
    },
    EditDependent: function (dependent) {
        RctApplication.ResetDependent();
        var clone = new RctApplication.RctDependentInit(ko.mapping.toJS(dependent), true);
        RctApplication.CurrentDependent(clone);
    },
    RemoveDependent: function (dependent) {
        RctApplication.Current().Dependents.remove(function (item) { return item.RelationId == dependent.RelationId; });
        if (dependent.RelationId() == RctApplication.CurrentDependent().RelationId()) {
            RctApplication.ResetDependent();
        }
    },
    ValidateEduQlf: function () {
        var valid = true;
        var tempValid = true;
        var allItems = RctApplication.GetItemsToValidate('#RctAppEducationalQualificationForm');

        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        return valid;
    },
    SaveEduQlf: function () {
        var current = RctApplication.CurrentEduQlf();
        if (current) {
            var valid = RctApplication.ValidateEduQlf();
            if (valid == true) {
                var alreadyExist = false;
                current.Qualification($("#RctAppQlfQualification option:selected").text());

                // Update if already existing qualification
                for (var i = 0; i < RctApplication.Current().EduQualifications().length; i++) {
                    var curId = RctApplication.Current().EduQualifications()[i].QlfCode();
                    if (current.Qualification() != 'Other' && current.QlfCode() == curId) {
                        RctApplication.Current().EduQualifications.replace(RctApplication.Current().EduQualifications()[i], current);
                        RctApplication.ResetEduQlf();
                        alreadyExist = true;
                    } else {
                        // Reset Key qualification flag
                        if (current.IsKeyQlf() == true) {
                            (RctApplication.Current().EduQualifications()[i]).IsKeyQlf(false);
                        }
                    }
                }

                // Add if new qualification
                if (!alreadyExist) {
                    RctApplication.Current().EduQualifications.push(current);
                    RctApplication.ResetEduQlf();
                }
            }
        }
    },
    ResetEduQlf: function () {
        var allItems = RctApplication.GetItemsToValidate('#RctAppEducationalQualificationForm');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            var errorId = id + "RctError";
            RctApplication.ClearItemError(errorId);
        }
        RctApplication.CurrentEduQlf(new RctApplication.RctEduQlfInit(null));
        RctApplication.CurrentSubject(new RctApplication.RctSubjectInit(null));
        RctApplication.Qualifications([]);
        RctApplication.Subjects([]);
        RctApplication.SubjectGrades([]);
    },
    EditEduQlf: function (eduQlf) {
        RctApplication.ResetEduQlf();
        var clone = new RctApplication.RctEduQlfInit(ko.mapping.toJS(eduQlf));
        RctApplication.CurrentEduQlf(clone);
        RctApplication.LoadQualificationsForType(clone.QlfTypeCode());
        RctApplication.LoadQlfSubjects(clone.QlfCode());
        RctApplication.LoadQlfGrades(clone.QlfCode());
    },
    RemoveEduQlf: function (eduQlf) {
        RctApplication.Current().EduQualifications.remove(function (item) { return item.QlfCode == eduQlf.QlfCode; });
        if (eduQlf.QlfCode() == RctApplication.CurrentEduQlf().QlfCode()) {
            RctApplication.ResetEduQlf();
        }
    },
    ValidateQlfSubject: function () {
        var valid = true;
        var tempValid = true;
        var allItems = RctApplication.GetItemsToValidate('#RctAppEducationalSubjectForm');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        return valid;
    },
    AddQlfSubject: function () {

        var current = RctApplication.CurrentSubject();
        if (current) {
            var valid = RctApplication.ValidateQlfSubject();
            if (valid == true) {
                if (RctApplication.CurrentEduQlf().QlfCode() != 'Other') {
                    var alreadyExist = false;
                    current.Subject($("#RctAppQlfSbjSubject option:selected").text());
                    current.SubjGrade($("#RctAppQlfSbjGrade option:selected").text());
                    // Update if already existing subject
                    for (var i = 0; i < RctApplication.CurrentEduQlf().Subjects().length; i++) {
                        var curId = RctApplication.CurrentEduQlf().Subjects()[i].SubjectCode();
                        if (current.SubjectCode() == curId) {
                            //RctApplication.CurrentEduQlf().Subjects()[i] = current;
                            RctApplication.CurrentEduQlf().Subjects.replace(RctApplication.CurrentEduQlf().Subjects()[i], current);
                            RctApplication.ResetQlfSubject();
                            alreadyExist = true;
                        }
                    }

                    // Add if new subject
                    if (!alreadyExist) {
                        RctApplication.CurrentEduQlf().Subjects.push(current);
                        RctApplication.ResetQlfSubject();
                    }
                } else {
                    RctApplication.CurrentEduQlf().Subjects.push(current);
                    RctApplication.ResetQlfSubject();
                }
            }
        }
    },
    RemoveQlfSubject: function (subject) {
        RctApplication.CurrentEduQlf().Subjects.remove(function (item) { return item.SubjectCode == subject.SubjectCode; });
    },
    ResetQlfSubject: function () {
        RctApplication.CurrentSubject(new RctApplication.RctSubjectInit(null));
    },
    ValidateLangProficiency: function (mode) {
        var errorDisplay = "#RctAppLangProficiencyError";
        $(errorDisplay).html("");
        $(errorDisplay).hide();
        var current = RctApplication.CurrentLangProficiency();
        if (current.LangCode() == null) {
            msg = "Please select a language";
            $(errorDisplay).html(msg);
            $(errorDisplay).show();
            return false;
        }

        if (current.ReadCode() == null && current.WriteCode() == null && current.SpeakCode() == null) {
            msg = "Please at least select a one ability to add language";
            if (mode != 1) { // If not Language Drop down change
                $(errorDisplay).html(msg);
                $(errorDisplay).show();
            }
            return false;
        }

        return true;
    },
    SaveLangProficiency: function () {
        var current = RctApplication.CurrentLangProficiency();
        if (current) {
            var valid = RctApplication.ValidateLangProficiency();
            if (valid == true) {
                current.Language = $("#RctAppQlfLang option:selected").text();
                var selVal = $("#RctAppQlfLangRead option:selected").text();
                current.ReadGrade($("#RctAppQlfLangRead").val() ? selVal : null);
                var selVal = $("#RctAppQlfLangWrite option:selected").text();
                current.WriteGrade($("#RctAppQlfLangWrite").val() ? selVal : null);
                var selVal = $("#RctAppQlfLangSpeak option:selected").text();
                current.SpeakGrade($("#RctAppQlfLangSpeak").val() ? selVal : null);
                var alreadyExist = false;
                // Update if already existing
                for (var i = 0; i < RctApplication.Current().LangProficiencies().length; i++) {
                    var curId = RctApplication.Current().LangProficiencies()[i].LangCode();
                    if (current.LangCode() == curId) {
                        RctApplication.Current().LangProficiencies.replace(RctApplication.Current().LangProficiencies()[i], current);
                        RctApplication.ResetLangProficiency();
                        alreadyExist = true;
                    }
                }

                // Add if new
                if (!alreadyExist) {
                    RctApplication.Current().LangProficiencies.push(current);
                    RctApplication.ResetLangProficiency();
                }
            }
        }
    },
    ResetLangProficiency: function () {
        RctApplication.CurrentLangProficiency(new RctApplication.RctLangProficiencyInit(null));
        RctApplication.LangRatings([]);
    },
    EditLangProficiency: function (langProficiency) {
        RctApplication.ResetLangProficiency();
        var clone = new RctApplication.RctLangProficiencyInit(ko.mapping.toJS(langProficiency));
        RctApplication.LoadLangRatings(clone.LangCode());
        RctApplication.CurrentLangProficiency(clone);
    },
    RemoveLangProficiency: function (langProficiency) {
        RctApplication.Current().LangProficiencies.remove(function (item) { return item.LangCode == langProficiency.LangCode; });
        if (langProficiency.LangCode() == RctApplication.CurrentLangProficiency().LangCode()) {
            RctApplication.ResetLangProficiency();
        }
    },
    ValidateWorkExp: function () {
        var valid = true;
        var tempValid = true;

        var allItems = RctApplication.GetItemsToValidate('#RctAppWorkExperienceTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        if (valid) {
            var isFresherForWork = RctApplication.Current().OtherInfo.IsFresherForWork();
            if (isFresherForWork == false) {
                var stDate = RctGetDateOnly(RctApplication.CurrentWorkExp().StartDate());
                var endDate = RctGetDateOnly(RctApplication.CurrentWorkExp().EndDate());
                if (stDate >= endDate) {
                    var msg = $('#RctAppWrkStartDate').data("rct-label") + " must be a early date than " + $('#RctAppWrkEndDate').data("rct-label");
                    RctApplication.ShowRctAppMessage("error", msg);
                    return false;
                }
            } else {
                var msg = "Cannot add Work Experience if you are Fresher for Work"
                RctApplication.ShowRctAppMessage("error", msg);
                return false;
            }
        }

        return valid;
    },
    GetNewWorkExpId: function () {
        var id = 1;
        for (var i = 0; i < RctApplication.Current().WorkExperiances().length; i++) {
            var curId = RctApplication.Current().WorkExperiances()[i].WrkExpId();
            if (id < curId) {
                id = curId;
            }
        }

        return id + 1;
    },
    SaveWorkExp: function () {
        var current = RctApplication.CurrentWorkExp();
        if (current) {
            var valid = RctApplication.ValidateWorkExp();
            if (valid == true) {
                if (current.WrkExpId() == null) {
                    current.WrkExpId(RctApplication.GetNewWorkExpId());
                    RctApplication.Current().WorkExperiances.push(current);
                    RctApplication.ResetWorkExp();
                } else {
                    for (var i = 0; i < RctApplication.Current().WorkExperiances().length; i++) {
                        var curId = RctApplication.Current().WorkExperiances()[i].WrkExpId();
                        if (current.WrkExpId() == curId) {
                            RctApplication.Current().WorkExperiances.replace(RctApplication.Current().WorkExperiances()[i], current);
                            RctApplication.ResetWorkExp();
                            return;
                        }
                    }
                }
            }
        }
    },
    ResetWorkExp: function () {
        var allItems = RctApplication.GetItemsToValidate('#RctAppWorkExperienceTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            var errorId = id + "RctError";
            RctApplication.ClearItemError(errorId);
        }
        RctApplication.CurrentWorkExp(new RctApplication.RctWorkExpInit(null));
    },
    EditWorkExp: function (workExp) {
        RctApplication.ResetWorkExp();
        var clone = new RctApplication.RctWorkExpInit(ko.mapping.toJS(workExp), true);
        RctApplication.CurrentWorkExp(clone);
    },
    RemoveWorkExp: function (workExp) {
        RctApplication.Current().WorkExperiances.remove(function (item) { return item.WrkExpId == workExp.WrkExpId; });
        if (WorkExp.WrkExpId() == RctApplication.CurrentWorkExp().WrkExpId()) {
            RctApplication.ResetWorkExp();
        }
    },
    ValidateReferee: function () {
        var valid = true;
        var tempValid = true;
        var allItems = RctApplication.GetItemsToValidate('#RctAppRefereesTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        return valid;
    },
    GetNewRefereeId: function () {
        var id = 1;
        for (var i = 0; i < RctApplication.Current().Referees().length; i++) {
            var curId = RctApplication.Current().Referees()[i].RefId();
            if (id < curId) {
                id = curId;
            }
        }

        return id + 1;
    },
    SaveReferee: function () {
        var current = RctApplication.CurrentReferee();
        if (current) {
            var valid = RctApplication.ValidateReferee();
            if (valid == true) {
                if (current.RefId() == null) {
                    current.RefId(RctApplication.GetNewRefereeId());
                    RctApplication.Current().Referees.push(current);
                    RctApplication.ResetReferee();
                } else {
                    for (var i = 0; i < RctApplication.Current().Referees().length; i++) {
                        var curId = RctApplication.Current().Referees()[i].RefId();
                        if (current.RefId() == curId) {
                            RctApplication.Current().Referees.replace(RctApplication.Current().Referees()[i], current);
                            RctApplication.ResetReferee();
                            return;
                        }
                    }
                }
            }
        }
    },
    ResetReferee: function () {
        var allItems = RctApplication.GetItemsToValidate('#RctAppRefereesTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            var errorId = id + "RctError";
            RctApplication.ClearItemError(errorId);
        }
        RctApplication.CurrentReferee(new RctApplication.RctRefereeInit(null));
    },
    EditReferee: function (referee) {
        RctApplication.ResetReferee();
        var clone = new RctApplication.RctRefereeInit(ko.mapping.toJS(referee), true);
        RctApplication.CurrentReferee(clone);
    },
    RemoveReferee: function (referee) {
        RctApplication.Current().Referees.remove(function (item) { return item.RefId == referee.RefId; });
        if (referee.RefId() == RctApplication.CurrentReferee().RefId()) {
            RctApplication.ResetReferee();
        }
    },
    BrowseAttachment: function () {
        if (RctApplication.ItemOnBlur('RctAppAttDocumentType')) {
            if (RctApplication.CurrentAttachment().DocTypeCode() != null) {
                $('#RctAppAttDocument').val('');
                $('#RctAppAttDocument').trigger('click');
            }
        }
    },
    AttachmentSelected: function (elemet, event) {
        var files = event.target.files;// FileList object
        if (files.length > 0) {
            var file = files[0];
            var size = file.size;
            var extension = file.name.substr((file.name.lastIndexOf('.') + 1)).toString().toLowerCase();
            var types = $("#rctHdnAttachmentTypes").val().toString().toLowerCase();
            var videotypes = $("#rctHdnAttachmentValidVideoTypes").val().toString().toLowerCase();
            var allowsize = $("#rctHdnAttachmentSize").val() * (1024 * 1024);
            var allowvideosize = $("#rctHdnAttachmentMaxVideoSize").val() * (1024 * 1024);
            var videotypecode = $("#rctHdnAttachmentVideoTypeCode").val().toString();

            if (RctApplication.CurrentAttachment().DocTypeCode() == videotypecode) { //If attchement is video 
                if (size > allowvideosize) {
                    var msg = RctGetResourceFileSizeFrom(RctApplication.GetHost(), videotypes, (allowvideosize / (1024 * 1024)));
                    RctApplication.ShowRctAppMessage("error", msg);
                    $('#RctAppAttDocument').val('');
                } else if (videotypes.indexOf(extension) < 0) {
                    var msg = RctGetResourceFileSizeFrom(RctApplication.GetHost(), videotypes, (allowvideosize / (1024 * 1024)));
                    RctApplication.ShowRctAppMessage("error", msg);
                    $('#RctAppAttDocument').val('');
                } else {
                    RctApplication.CurrentAttachment().InFile(file);
                }
            } else {
                if (size > allowsize) {
                    var msg = RctGetResourceFileSizeFrom(RctApplication.GetHost(), types, (allowsize / (1024 * 1024)));
                    RctApplication.ShowRctAppMessage("error", msg);
                    $('#RctAppAttDocument').val('');
                } else if (types.indexOf(extension) < 0) {
                    var msg = RctGetResourceFileSizeFrom(RctApplication.GetHost(), types, (allowsize / (1024 * 1024)));
                    RctApplication.ShowRctAppMessage("error", msg);
                    $('#RctAppAttDocument').val('');
                } else {
                    RctApplication.CurrentAttachment().InFile(file);
                }
            }
        }
        RctApplication.ItemOnBlur('RctAppAttDocument');
    },
    ValidateAttachment: function () {
        var valid = true;
        var tempValid = true;
        var allItems = RctApplication.GetItemsToValidate('#RctAppAttachmentsTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        return valid;
    },
    GetNewAttachmentId: function () {
        var id = 0;
        for (var i = 0; i < RctApplication.Current().Attachments().length; i++) {
            var curId = RctApplication.Current().Attachments()[i].Id();
            if (id < curId) {
                id = curId;
            }
        }

        return id + 1;
    },
    SaveAttachment: function () {

        var current = RctApplication.CurrentAttachment();
        if (current) {
            var valid = RctApplication.ValidateAttachment();
            if (valid == true) {
                current.Name(current.InFile().name);
                current.DocType($('#RctAppAttDocumentType option:selected').text());
                if (current.Id() == null) {
                    current.Id(RctApplication.GetNewAttachmentId());
                    RctApplication.Current().Attachments.push(current);
                    RctApplication.ResetAttachment();
                } else {
                    for (var i = 0; i < RctApplication.Current().Attachments().length; i++) {
                        var curId = RctApplication.Current().Attachments()[i].Id();
                        if (current.Id() == curId) {
                            RctApplication.Current().Attachments.replace(RctApplication.Current().Attachments()[i], current);
                            RctApplication.ResetAttachment();
                            return;
                        }
                    }
                }
            }
        }
    },
    ResetAttachment: function () {
        var allItems = RctApplication.GetItemsToValidate('#RctAppAttachmentsTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            var errorId = id + "RctError";
            RctApplication.ClearItemError(errorId);
        }
        RctApplication.CurrentAttachment(new RctApplication.RctAttachmentInit(null));
    },
    EditAttachment: function (attachment) {
        RctApplication.ResetAttachment();
        var clone = new RctApplication.RctAttachmentInit(ko.mapping.toJS(attachment), true);
        RctApplication.CurrentAttachment(clone);
    },
    RemoveAttachment: function (attachment) {
        RctApplication.Current().Attachments.remove(function (item) { return item.Id == attachment.Id; });
        if (attachment.Id() == RctApplication.CurrentAttachment().Id()) {
            RctApplication.ResetAttachment();
        }
    },
    DownloadAttachment: function (attachment) {
        var id = attachment.AttachmentId();
        if (id) {
            var url = RctApplication.GetPath("/Common/DownloadAttachment/" + id);
            RctDownloadFile(url);
        }
    },
    ValidateArticle: function () {
        var valid = true;
        var tempValid = true;
        var allItems = RctApplication.GetItemsToValidate('#RctAppArticlesTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        return valid;
    },
    GetNewArticleId: function () {
        var id = 1;
        for (var i = 0; i < RctApplication.Current().Articles().length; i++) {
            var curId = RctApplication.Current().Articles()[i].ArticleId();
            if (id < curId) {
                id = curId;
            }
        }

        return id + 1;
    },
    SaveArticle: function () {
        var current = RctApplication.CurrentArticle();
        if (current) {
            var valid = RctApplication.ValidateArticle();
            if (valid == true) {

                current.Category($("#RctAppArtDocumentCategory option:selected").text());
                current.Country($("#RctAppArtCountry option:selected").text());
                current.CategoryId($("#RctAppArtDocumentCategory option:selected").val());
                if (current.ArticleId() == null) {
                    current.ArticleId(RctApplication.GetNewArticleId());
                    RctApplication.Current().Articles.push(current);
                    RctApplication.ResetArticle();
                } else {
                    for (var i = 0; i < RctApplication.Current().Articles().length; i++) {
                        var curId = RctApplication.Current().Articles()[i].ArticleId();
                        if (current.ArticleId() == curId) {
                            RctApplication.Current().Articles.replace(RctApplication.Current().Articles()[i], current);
                            RctApplication.ResetArticle();
                            return;
                        }
                    }
                }
            }
        }
    },
    ResetArticle: function () {
        var allItems = RctApplication.GetItemsToValidate('#RctAppArticlesTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            var errorId = id + "RctError";
            RctApplication.ClearItemError(errorId);
        }
        RctApplication.CurrentArticle(new RctApplication.RctArticleInit(null));
    },
    EditArticle: function (article) {
        RctApplication.ResetArticle();
        var clone = new RctApplication.RctArticleInit(ko.mapping.toJS(article), true);
        RctApplication.CurrentArticle(clone);
    },
    RemoveArticle: function (article) {
        RctApplication.Current().Articles.remove(function (item) { return item.ArticleId == article.ArticleId; });
        if (article.ArticleId() == RctApplication.CurrentArticle().ArticleId()) {
            RctApplication.ResetArticle();
        }
    },
    ValidateExCurActivity: function () {
        var valid = true;
        var tempValid = true;
        var allItems = RctApplication.GetItemsToValidate('#RctExtraCurricularTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        return valid;
    },
    GetNewExCurId: function () {
        var id = 1;
        for (var i = 0; i < RctApplication.Current().ExCurActivities().length; i++) {
            var curId = RctApplication.Current().ExCurActivities()[i].ExCurId();
            if (id < curId) {
                id = curId;
            }
        }

        return id + 1;
    },
    SaveExCurActivity: function () {
        var current = RctApplication.CurrentExCurActivity();
        if (current) {
            var valid = RctApplication.ValidateExCurActivity();
            if (valid == true) {
                current.Category($("#RctAppExcCategory option:selected").text());
                current.ActivityType($("#RctAppExcActivityType option:selected").text());
                if (current.ExCurId() == null) {
                    current.ExCurId(RctApplication.GetNewExCurId());
                    RctApplication.Current().ExCurActivities.push(current);
                    RctApplication.ResetExCurActivity();
                } else {
                    for (var i = 0; i < RctApplication.Current().ExCurActivities().length; i++) {
                        var curId = RctApplication.Current().ExCurActivities()[i].ExCurId();
                        if (current.ExCurId() == curId) {
                            RctApplication.Current().ExCurActivities.replace(RctApplication.Current().ExCurActivities()[i], current);
                            RctApplication.ResetExCurActivity();
                            return;
                        }
                    }
                }
            }
        }
    },
    ResetExCurActivity: function () {
        var allItems = RctApplication.GetItemsToValidate('#RctExtraCurricularTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            var errorId = id + "RctError";
            RctApplication.ClearItemError(errorId);
        }
        RctApplication.CurrentExCurActivity(new RctApplication.RctExCurActivityInit(null));
        RctApplication.ExCurActivityTypes([]);
    },
    EditExCurActivity: function (article) {
        RctApplication.ResetExCurActivity();
        var clone = new RctApplication.RctExCurActivityInit(ko.mapping.toJS(article), true);
        RctApplication.CurrentExCurActivity(clone);
        RctApplication.LoadExCurActivityTypes(clone.CategoryCode);
    },
    RemoveExCurActivity: function (article) {
        RctApplication.Current().ExCurActivities.remove(function (item) { return item.ExCurId == article.ExCurId; });
        if (article.ExCurId() == RctApplication.CurrentExCurActivity().ExCurId()) {
            RctApplication.ResetExCurActivity();
        }
    },
    ValidateGenderWithSalutation: function (genderCode, saluCode) {

        validSalutation = true;
        var saluList = RctApplication.SalutationList();
        for (var i = 0; i < saluList.length; i++) {
            if (saluCode == saluList[i]["SaluCode"]) {
                if (saluList[i]["SaluGenderValFlg"] == 1) {
                    if (saluList[i]["SaluGender"] != genderCode) {
                        console.log("validated");
                        validSalutation = false;
                        return validSalutation;
                    }
                }
            }
        }
        return validSalutation;
    },
    MembershipTypeChanged: function (membership) {
        var selectedMembTypeId = membership.MembershipTypeId();
        RctApplication.FilteredMembership([]);

        for (var i = 0; i < RctApplication.Membership().length; i++) {
            if (RctApplication.Membership()[i].Other == selectedMembTypeId) {
                RctApplication.FilteredMembership.push(RctApplication.Membership()[i])
            }
        }
    },
    SaveMembership: function () {
        var current = RctApplication.CurrentMembershipDetails();
        if (current) {
            var valid = RctApplication.ValidateMembership();
            if (valid == true) {
                if (current.NoOfMemberships() == null) {
                    current.NoOfMemberships(0);
                }
                RctApplication.CurrentMembershipDetails().MembershipTypeName($("#RctAppMembershipType option:selected").text())
                if (current.MembershipId() == null) {
                    current.MembershipId(RctApplication.GetNewMembershipId());
                    RctApplication.Current().Memberships.push(current);
                    RctApplication.ResetMembership();
                } else {
                    for (var i = 0; i < RctApplication.Current().Memberships().length; i++) {
                        var curId = RctApplication.Current().Memberships()[i].MembershipId();
                        if (current.MembershipId() == curId) {
                            RctApplication.Current().Memberships.replace(RctApplication.Current().Memberships()[i], current);
                            RctApplication.ResetMembership();
                            return;
                        }
                    }
                }
            }
        }
    },
    ValidateMembership: function () {
        var valid = true;
        var tempValid = true;
        var allItems = RctApplication.GetItemsToValidate('#RctAppMembershipDetailsTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            tempValid = RctApplication.ValidateItem(id, "false");
            if (tempValid == false) {
                valid = tempValid;
            }
        }

        return valid;
    },
    GetNewMembershipId: function () {
        var id = 1;
        for (var i = 0; i < RctApplication.Current().Memberships().length; i++) {
            var curId = RctApplication.Current().Memberships()[i].MembershipId();
            if (id < curId) {
                id = curId;
            }
        }

        return id + 1;
    },
    ResetMembership: function () {
        var allItems = RctApplication.GetItemsToValidate('#RctAppMembershipDetailsTab');
        for (var i = 0; i < allItems.length; i++) {
            var id = $(allItems[i]).attr('id');
            var errorId = id + "RctError";
            RctApplication.ClearItemError(errorId);
        }
        RctApplication.CurrentMembershipDetails(new RctApplication.RctMembershipDetailsInit(null));
    },
    RemoveMembership: function (memb) {
        RctApplication.Current().Memberships.remove(function (item) { return item.MembershipId == memb.MembershipId; });
        if (memb.MembershipId() == RctApplication.CurrentMembershipDetails().MembershipId()) {
            RctApplication.ResetMembership();
        }
    },
    EditMembership: function (memb) {
        RctApplication.ResetMembership();
        RctApplication.FilteredMembership(RctApplication.Membership());
        var clone = new RctApplication.RctMembershipDetailsInit(ko.mapping.toJS(memb), true);
        RctApplication.CurrentMembershipDetails(clone);
    },
    DSDivisionChanged: function (dsdiv) {
        var selectedDSCode = dsdiv.PersonalInfo().DSDivisionCode();
        RctApplication.FilteredGNDivisions([]);
        RctApplication.Current().PersonalInfo().GNDivisionCode(null);

        for (var i = 0; i < RctApplication.GNDivisions().length; i++) {
            if (RctApplication.GNDivisions()[i].Other == selectedDSCode) {
                RctApplication.FilteredGNDivisions.push(RctApplication.GNDivisions()[i])
            }
        }

    },
    DownloadCVTemplate: function () {
        var fileName = "CV Template.docx";
        var url = RctApplication.GetPath("/Application/DownloadCVSamples?fileName=" + fileName);
        RctDownloadFile(url);
    },
    DownloadSampleCV: function () {
        var fileName = "Sample CV.pdf";
        var url = RctApplication.GetPath("/Application/DownloadCVSamples?fileName=" + fileName);
        RctDownloadFile(url);
    },
    IsCurrentAddressChecked: function () {
        if (RctApplication.Current().PersonalInfo().IsCurrentAddress) {

            var iscurrentval = RctApplication.Current().PersonalInfo().IsCurrentAddress();
            if (iscurrentval == true) {
                RctApplication.Current().PersonalInfo().CurrentHouseNo(RctApplication.Current().PersonalInfo().HouseNo())
                RctApplication.Current().PersonalInfo().CurrentAparmentNo(RctApplication.Current().PersonalInfo().ApartmentNo())
                RctApplication.Current().PersonalInfo().CurrentStreet1(RctApplication.Current().PersonalInfo().Street1())
                RctApplication.Current().PersonalInfo().CurrentStreet2(RctApplication.Current().PersonalInfo().Street2())
                RctApplication.Current().PersonalInfo().CurrentCity(RctApplication.Current().PersonalInfo().City())
                RctApplication.Current().PersonalInfo().CurrentCountryCode(RctApplication.Current().PersonalInfo().CountryCode())
                $('#RctAppPerCurrentHouseNo').prop('readonly', true);
                $('#RctAppPerCurrentApartmentNo').prop('readonly', true);
                $('#RctAppPerCurrentStreet1').prop('readonly', true);
                $('#RctAppPerCurrentStreet2').prop('readonly', true);
                $('#RctAppPerCurrentCityTown').prop('readonly', true);
                $('#RctAppPerCurrentCountry').prop('disabled', true);
            } else if (iscurrentval == false) {
                $('#RctAppPerCurrentHouseNo').prop('readonly', false);
                $('#RctAppPerCurrentApartmentNo').prop('readonly', false);
                $('#RctAppPerCurrentStreet1').prop('readonly', false);
                $('#RctAppPerCurrentStreet2').prop('readonly', false);
                $('#RctAppPerCurrentCityTown').prop('readonly', false);
                $('#RctAppPerCurrentCountry').prop('disabled', false);
                RctApplication.Current().PersonalInfo().CurrentHouseNo('')
                RctApplication.Current().PersonalInfo().CurrentAparmentNo('')
                RctApplication.Current().PersonalInfo().CurrentStreet1('')
                RctApplication.Current().PersonalInfo().CurrentStreet2('')
                RctApplication.Current().PersonalInfo().CurrentCity('')
                RctApplication.Current().PersonalInfo().CurrentCountryCode('')
            }
        }
        return true;
    },
}

$(document).ready(function () {
    $.ajaxSetup({ cache: false });
    RctApplication.Init();

    $(document).on({
        change: function () {
            if (!this.checked) {
                $('textarea#RctAppQlfIsKeyQualificationDescription').val('');
            }
        }
    }, '#RctAppQlfIsKeyQualification');
    $(document).on({
        change: function () {
            var qlfTypeCode = $('#RctAppQlfQualificationType').val();
            if (RctApplication.CurrentEduQlf()) {
                RctApplication.CurrentEduQlf().QlfCode(null);
                RctApplication.CurrentEduQlf().Qualification(null);
                RctApplication.CurrentEduQlf().Subjects([]);
            }
            if (RctApplication.CurrentSubject()) {
                RctApplication.CurrentSubject().SubjectCode(null);
                RctApplication.CurrentSubject().Subject(null);
                RctApplication.CurrentSubject().SubjGradeCode(null);
                RctApplication.CurrentSubject().SubjGrade(null);
            }
            RctApplication.LoadQualificationsForType(qlfTypeCode);
        }
    }, '#RctAppQlfQualificationType');
    $(document).on({
        change: function () {
            var qlfCode = $('#RctAppQlfQualification').val();
            if (RctApplication.CurrentEduQlf()) {
                RctApplication.CurrentEduQlf().Subjects([]);
            }
            if (RctApplication.CurrentSubject()) {
                RctApplication.CurrentSubject().SubjectCode(null);
                RctApplication.CurrentSubject().Subject(null);
            }
            RctApplication.LoadQlfSubjects(qlfCode);
            RctApplication.LoadQlfGrades(qlfCode);
        }
    }, '#RctAppQlfQualification');
    $(document).on({
        change: function () {
            var langCode = $('#RctAppQlfLang').val();
            RctApplication.LoadLangRatings(langCode);
            RctApplication.ValidateLangProficiency(1);
        }
    }, '#RctAppQlfLang');

    $(document).on({
        change: function () {
            var exCurCatCode = $('#RctAppExcCategory').val();
            if (RctApplication.CurrentExCurActivity()) {
                RctApplication.CurrentExCurActivity().ActivityTypeCode(null);
            }
            RctApplication.LoadExCurActivityTypes(exCurCatCode);
        }
    }, '#RctAppExcCategory');
});

